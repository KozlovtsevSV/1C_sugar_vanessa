
///////////////////////////////////////////////////
//Служебные функции и процедуры
///////////////////////////////////////////////////

// контекст фреймворка Vanessa-ADD
Перем Ванесса;

// Функция экспортирует список шагов, которые реализованы в данной внешней обработке.
Функция ПолучитьСписокТестов(КонтекстФреймворкаBDD) Экспорт
	Ванесса = КонтекстФреймворкаBDD;
	
	ВсеТесты = Новый Массив;

	// описание шагов
	// пример вызова Ванесса.ДобавитьШагВМассивТестов(ВсеТесты, Снипет, ИмяПроцедуры, ПредставлениеТеста, ОписаниеШага, ТипШагаДляОписания, ТипШагаВДереве);

	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты, "ЯСоздаюЭлементыСправочника(Парам01, ТабПарам1, ТабПарам2, ТабПарам3, ТабПарам4, ТабПарам5)", "ЯСоздаюЭлементыСправочника", "И Я создаю элементы справочника ""ИмяСправочника""", "", "");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯСоздаюДокументы(Парам01,ТабПарам1, ТабПарам2, ТабПарам3, ТабПарам4, ТабПарам5)","ЯСоздаюДокументы","И Я создаю документы ""ИмяДокумента""","","");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯСоздаюДокументыСТЧ(Парам01, Парам02, ТабПарам1, ТабПарам2, ТабПарам3, ТабПарам4, ТабПарам5)","ЯСоздаюДокументыСТЧ","И Я создаю документы ""ИмяДокумента"" с ТЧ ""ИмяТЧ1, ИмяТЧ2""","","");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯСоздаюДанныеВРC(Парам01,ТабПарам)","ЯСоздаюДанныеВРC","И я создаю данные в РC ""ИмяРегистра""","","");

	Возврат ВсеТесты;
КонецФункции

// Служебная функция для подключения библиотеки создания fixtures.
Функция ПолучитьМакетОбработки(ИмяМакета) Экспорт
	Возврат ПолучитьМакет(ИмяМакета);
КонецФункции

///////////////////////////////////////////////////
//Работа со сценариями
///////////////////////////////////////////////////

// Процедура выполняется перед началом каждого сценария
Процедура ПередНачаломСценария() Экспорт
	
КонецПроцедуры

// Процедура выполняется перед окончанием каждого сценария
Процедура ПередОкончаниемСценария() Экспорт
	
КонецПроцедуры

///////////////////////////////////////////////////
//Реализация шагов
///////////////////////////////////////////////////
#Область ЗаполнениеСправочников
//И Я создаю элементы справочника "Банки"
//@ЯСоздаюЭлементыСправочника(Парам01, ТабПарам)
Процедура ЯСоздаюЭлементыСправочника(Парам01, ТабПарам1, ТабПарам2 = Неопределено, ТабПарам3 = Неопределено, ТабПарам4 = Неопределено, ТабПарам5 = Неопределено) Экспорт
	
	Если Парам01 = "Уникальный справочник который нужно заполнять как-то по другому" Тогда
		/// тут написать что нужно делать
		Возврат;
	Иначе
			ЯСоздаюЭлементыСправочникаЛЮБОЙСПРАВОЧНИК(Парам01, ТабПарам1, ТабПарам2, ТабПарам3, ТабПарам4);
	КонецЕсли;

КонецПроцедуры

Процедура ЯСоздаюЭлементыСправочникаЛЮБОЙСПРАВОЧНИК(Парам01, ТабПарам1, ТабПарам2, ТабПарам3, ТабПарам4)
	
	ТаблицаЭлементыСправочника = ТаблицаЗначенийИзПараметра(ТабПарам1);
	
	// в большинстве случаев у справочников нет ТЧ либо одна но если их более одной тогда
	// ТабПарам2, ТабПарам3, ТабПарам4 будем ожидать данные ТЧ в последовательности их следования в Метаданных
	ТабличныеЧасти = Метаданные.Справочники[Парам01].ТабличныеЧасти;
	
	ТаблицаЭлементыСправочникаКолонки = ТаблицаЭлементыСправочника.Колонки;
	
	Для Каждого Строка ИЗ ТаблицаЭлементыСправочника Цикл
		
		Владелец = ВладелецЭлементаСправочника(Парам01, Строка, ТаблицаЭлементыСправочникаКолонки);
		
		Родитель =РодительЭлементаСправочника(Строка, ТаблицаЭлементыСправочникаКолонки);
		
		Группа = ГруппаЭлементаСправочника(Парам01, Строка, ТаблицаЭлементыСправочникаКолонки);
		
		Если ЗначениеЗаполнено(Родитель) Тогда
			Родитель = Справочники[Парам01].НайтиПоКоду(Родитель,Истина);
		КонецЕсли;
			
		Если Группа <> Неопределено И ЗначениеЗаполнено(Группа) И Группа Тогда
		
			ЭлементСправочника = СсылкаСправочникаСКодом(Парам01, Строка.Код, Родитель);
			Если ЭлементСправочника.Пустая() Тогда
				ЭлементСправочника = Справочники[Парам01].СоздатьГруппу();
				ЗаполнитьЗначенияСвойств_Сахар(ЭлементСправочника, Строка);
				ЭлементСправочника.Записать();
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		ЭлементСправочника = ЭлементСправочникаСКодом(Парам01, Строка.Код, Родитель, Владелец);
		
		ЗаполнитьЗначенияСвойств_Сахар(ЭлементСправочника, Строка);
		
		// заполнение табличных частей элемента Справочника
		ТабПарам = Неопределено;
		ИндексТЧ = 1;
		Для Каждого СтрокаТабличнаяЧасть Из ТабличныеЧасти Цикл
			ИндексТЧ = ИндексТЧ + 1;
			Выполнить("ТабПарам = ТабПарам" + ИндексТЧ);
			// если таблицы нет тогда не заполняем ТЧ
			ЗаполнитьТабличнуюЧасть(ЭлементСправочника, ТабПарам, СтрокаТабличнаяЧасть.Имя);
		КонецЦикла;
		
		ЭлементСправочника.ОбменДанными.Загрузка = ОбменДаннымиЗагрузка(КонтекстСохраняемый);
		ЭлементСправочника.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Функция ГруппаЭлементаСправочника(ИмяСправочника, Строка, ТаблицаЭлементыСправочникаКолонки)
	
	Иерархический = Метаданные.Справочники[ИмяСправочника].Иерархический;
	Группа = ?((НЕ (ТаблицаЭлементыСправочникаКолонки.Найти("ЭтоГруппа") = Неопределено)) И ЗначениеЗаполнено(Строка.ЭтоГруппа), БулевоИзСтроки(Строка.ЭтоГруппа), Неопределено);
	
	Если Группа <> Неопределено И ЗначениеЗаполнено(Группа) И Группа И Иерархический = Ложь Тогда
		ВызватьИсключение СтрШаблон("Справочник %1 не Иерархический создание груп не возможно", Иерархический);
	КонецЕсли;
		
	Возврат Группа;

КонецФункции

Функция РодительЭлементаСправочника(Строка, ТаблицаЭлементыСправочникаКолонки)
	
	Родитель = ?((НЕ (ТаблицаЭлементыСправочникаКолонки.Найти("Родитель") = Неопределено)) И ЗначениеЗаполнено(Строка.Родитель), Строка.Родитель, Неопределено);
	
	Возврат Родитель;

КонецФункции

Функция ВладелецЭлементаСправочника(ИмяСправочника, Строка, ТаблицаЭлементыСправочникаКолонки)
	
	Владелец = ?((НЕ (ТаблицаЭлементыСправочникаКолонки.Найти("Владелец") = Неопределено)) И ЗначениеЗаполнено(Строка.Владелец), Строка.Владелец, Неопределено);
	ТипВладельца = ?(ТаблицаЭлементыСправочникаКолонки.Найти("Владелец_Тип_") = Неопределено, Неопределено, Строка.Владелец_Тип_);
	Владелец = ВладелецСправочника(ИмяСправочника, Владелец, ТипВладельца);
	
	Возврат Владелец;

КонецФункции

Процедура ЗаполнитьТабличнуюЧасть(ЭлементСправочника, ТабПарам, ИмяТабличнойЧасти)
	
	Если ТабПарам = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТЧ = ТаблицаЗначенийИзПараметра(ТабПарам);
	Для Каждого СтрокаТаблицы Из ТЧ Цикл
		СтрокаТЧ = ЭлементСправочника[ИмяТабличнойЧасти].Добавить();
		ЗаполнитьЗначенияСвойств_Сахар(СтрокаТЧ, СтрокаТаблицы);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеДокументов

Процедура ЯСоздаюДокументыСТЧ(Парам01, Парам02, ТабПарам1, ТабПарам2 = Неопределено, ТабПарам3 = Неопределено, ТабПарам4 = Неопределено, ТабПарам5 = Неопределено) Экспорт
	
	Если Парам01 = "Уникальный справочник который нужно заполнять как-то по другому" Тогда
		/// тут написать что нужно делать
		Возврат;
	Иначе
		ЯСоздаюДокументы_ЛЮБОЙДОКУМЕНТ(Парам01, Парам02, ТабПарам1, ТабПарам2, ТабПарам3, ТабПарам4, ТабПарам5);
	КонецЕсли;
	
КонецПроцедуры

//И Я создаю документы ""
//@ЯСоздаюТестовыеДокументыПоДаннымТаблицы(Парам01,ТабПарам1,ТабПарам2)
Процедура ЯСоздаюДокументы(Парам01, ТабПарам1, ТабПарам2 = Неопределено, ТабПарам3 = Неопределено, ТабПарам4 = Неопределено, ТабПарам5 = Неопределено) Экспорт
	
	Если Парам01 = "Уникальный справочник который нужно заполнять как-то по другому" Тогда
		/// тут написать что нужно делать
		Возврат;
	Иначе
		ЯСоздаюДокументы_ЛЮБОЙДОКУМЕНТ(Парам01, "", ТабПарам1, ТабПарам2, ТабПарам3, ТабПарам4, ТабПарам5);
	КонецЕсли;
	
КонецПроцедуры

//И Я создаю документы "КонвертацияАкций" по данным таблицы
//@ЯСоздаюТестовыеДокументыПоДаннымТаблицы(Парам01,ТабПарам1,ТабПарам2)
Процедура ЯСоздаюДокументы_ЛЮБОЙДОКУМЕНТ(Парам01, Парам02, ТабПарам1, ТабПарам2, ТабПарам3, ТабПарам4, ТабПарам5)
	
	Перем РежимЗаписиДокументов;
	
	ТаблицаДокументы = ТаблицаЗначенийИзПараметра(ТабПарам1);
	
	// Парам02 = строки с именами ТЧ по порядку в котором будем заполнять
	Если ЗначениеЗаполнено(Парам02) Тогда
		ТабличныеЧасти = СтрРазделить(Парам02, ",", Ложь);
	Иначе
		ТабличныеЧасти = Новый Массив;
		Для Каждого СтрокаТабличнаяЧасть Из Метаданные.Документы[Парам01].ТабличныеЧасти Цикл
			ТабличныеЧасти.Добавить(СтрокаТабличнаяЧасть.Имя);
		КонецЦикла;
	КонецЕсли;

	// в большинстве случаев у документов одна ТЧ, но если их более одной тогда
	// ТабПарам2, ТабПарам3, ТабПарам4 будем ожидать данные ТЧ в последовательности их следования в Метаданных
	
	Для Каждого Строка ИЗ ТаблицаДокументы Цикл
		
		Если ЗначениеЗаполнено(Строка.Дата) Тогда
			ДатаДокумента = Строка.Дата;
		Иначе
			ДатаДокумента = ТекущаяДатаСеанса();
		КонецЕсли;
		
		Документ = НовыйДокумент(Парам01, Строка.Номер, ДатаДокумента);
		ЗаполнитьЗначенияСвойств_Сахар(Документ, Строка);
		
		// заполнение табличных частей Документа
		ТабПарам = Неопределено;
		ИндексТЧ = 1;
		Для Каждого СтрокаТабличнаяЧасть Из ТабличныеЧасти Цикл
			ИндексТЧ = ИндексТЧ + 1;
			Попытка
				ТабПарам = Вычислить("ТабПарам" + ИндексТЧ);
			Исключение
				ТабПарам = Неопределено;
			КонецПопытки;
			// если таблицы нет тогда не заполняем ТЧ
			Если ТабПарам = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ЗаполнитьТЧДокумента(Документ, ТабПарам, СокрЛП(СтрокаТабличнаяЧасть));
		КонецЦикла;
		
		РежимЗаписиДокументов = "";
		Если КонтекстСохраняемый.Свойство("РежимЗаписиДокументов", РежимЗаписиДокументов) Тогда
			РежимЗаписиДокументов = ?(НРег(РежимЗаписиДокументов) = "проведение",
										РежимЗаписиДокумента.Проведение,
										РежимЗаписиДокумента.Запись);
		Иначе
			РежимЗаписиДокументов = ?(Документ.Метаданные().Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить,
										РежимЗаписиДокумента.Проведение,
										РежимЗаписиДокумента.Запись);
		КонецЕсли;
		
		Если РежимЗаписиДокументов = РежимЗаписиДокумента.Запись Тогда
			Документ.ОбменДанными.Загрузка = ОбменДаннымиЗагрузка(КонтекстСохраняемый);
		КонецЕсли;
		
		Документ.Записать(РежимЗаписиДокументов);
	КонецЦикла;
КонецПроцедуры

Процедура ЗаполнитьТЧДокумента(Документ, ТабПарам, ИмяТЧ)
	
	ТЧ = ТаблицаЗначенийИзПараметра(ТабПарам);
	КолонкаНомерДокумента = ТЧ.Колонки.Найти("НомерДокументаВладельца");
	
	Документ[ИмяТЧ].Очистить();
	
	Для Каждого СтрокаТаблицы Из ТЧ Цикл
		Если НЕ КолонкаНомерДокумента = Неопределено Тогда 
			Если НЕ СокрЛП(Документ.Номер) = СокрЛП(СтрокаТаблицы.НомерДокументаВладельца) Тогда 
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		СтрокаТЧ = Документ[ИмяТЧ].Добавить();
		ЗаполнитьЗначенияСвойств_Сахар(СтрокаТЧ, СтрокаТаблицы);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область РегистрыСведений
//И я создаю данные в РC "Любойрегистр"
//@ЯСоздаюТестовыеДанныеВРCПоДаннымТаблицы(Парам01,ТабПарам)
Процедура ЯСоздаюДанныеВРC(Парам01,ТабПарам) Экспорт
	
	Если Парам01 = "Уникальный регистр который нужно заполнять как-то по другому" Тогда
		Возврат;
	Иначе
		ЯСоздаюДанныеПоРС_Любой(Парам01,ТабПарам);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЯСоздаюДанныеПоРС_Любой(Парам01,ТабПарам) Экспорт
	
	ТаблицаЗначений = ТаблицаЗначенийИзПараметра(ТабПарам);
	
	Для каждого Строка из ТаблицаЗначений Цикл
		МенеджерЗаписи = РегистрыСведений[Парам01].СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств_Сахар(МенеджерЗаписи,Строка);
		МенеджерЗаписи.Записать(Истина);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область САХАР

Функция ИнициализироватьПрефиксыМетаданных(ПрефиксыМетаданных = Неопределено)
	
	Если ПрефиксыМетаданных = Неопределено Тогда
		ПрефиксыМетаданных = Новый Структура;
		ПрефиксыМетаданных.Вставить("ПрефиксСправочники", "Справочник.");
		ПрефиксыМетаданных.Вставить("ПрефиксПланОбмена", "ПланОбмена.");
		ПрефиксыМетаданных.Вставить("ПрефиксПеречисления", "Перечисление.");
		ПрефиксыМетаданных.Вставить("ПрефиксДокументы", "Документ.");
		ПрефиксыМетаданных.Вставить("ПрефиксПВХ", "ПланВидовХарактеристик.");
		ПрефиксыМетаданных.Вставить("ПрефиксРС", "РегистрСведений.");
		ПрефиксыМетаданных.Вставить("ПрефиксРН", "РегистрНакопления.");
		ПрефиксыМетаданных.Вставить("ПрефиксТабличнаяЧасть", ".ТабличнаяЧасть.");
		ПрефиксыМетаданных.Вставить("ПрефиксТаблицаЗначений", "ТаблицаЗначений");
	КонецЕсли;
	
	Возврат ПрефиксыМетаданных;
	
КонецФункции

Процедура ЗаполнитьЗначенияСвойств_Сахар(Приемник, Данные, КолонкиЗаполнения = Неопределено, КолонкиИсключения = Неопределено) Экспорт
	
	ПрефиксыМетаданных = ИнициализироватьПрефиксыМетаданных();
	
	СтандартныеРеквизиты = Новый ТаблицаЗначений;
	Измерения = Новый ТаблицаЗначений;
	Ресурсы = Новый ТаблицаЗначений;
	Реквизиты = Новый ТаблицаЗначений;
	
	ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗНЧ(Приемник));
	
	// обработка таблицы значений
	Если ОбъектМетаданных <> Неопределено Тогда
		ТипОбъекта = ОбъектМетаданных.ПолноеИмя();
		
	ИначеЕсли ТипЗнч(Приемник.Владелец()) = Тип("ТаблицаЗначений") Тогда
		ОбъектМетаданных = Приемник.Владелец();
		ТипОбъекта = "ТаблицаЗначений";
	Иначе
		ВызватьИсключение СтрШаблон("Заполнения данными объекта типа %1 не реализовано", ТипЗНЧ(Приемник));
	КонецЕсли;
	
	Если СтрНачинаетсяС(ТипОбъекта, ПрефиксыМетаданных.ПрефиксРН) ИЛИ СтрНачинаетсяС(ТипОбъекта, ПрефиксыМетаданных.ПрефиксРС) Тогда
		СтандартныеРеквизиты = ОбъектМетаданных.СтандартныеРеквизиты;
		Измерения = ОбъектМетаданных.Измерения;
		Ресурсы = ОбъектМетаданных.Ресурсы;
		Реквизиты = ОбъектМетаданных.Реквизиты;
		
	ИначеЕсли СтрНачинаетсяС(ТипОбъекта, ПрефиксыМетаданных.ПрефиксДокументы) Тогда
		СтандартныеРеквизиты = ОбъектМетаданных.СтандартныеРеквизиты;
		Реквизиты = ОбъектМетаданных.Реквизиты;
		
	ИначеЕсли СтрНачинаетсяС(ТипОбъекта, ПрефиксыМетаданных.ПрефиксСправочники) Тогда
		СтандартныеРеквизиты = ОбъектМетаданных.СтандартныеРеквизиты;
		Реквизиты = ОбъектМетаданных.Реквизиты;
		
	ИначеЕсли СтрЧислоВхождений(ТипОбъекта, ПрефиксыМетаданных.ПрефиксТабличнаяЧасть) Тогда
		Реквизиты = ОбъектМетаданных.Реквизиты;
		
	ИначеЕсли СтрЧислоВхождений(ТипОбъекта, ПрефиксыМетаданных.ПрефиксТаблицаЗначений) Тогда
		Реквизиты = ОбъектМетаданных.Колонки;
		
	Иначе
		ВызватьИсключение СтрШаблон("Заполнения данными объекта типа %1 не реализовано", ТипОбъекта);
		
	КонецЕсли;
	
	ВыполнитьЗаполнение_Сахар(Приемник, Данные, Измерения, КолонкиЗаполнения, КолонкиИсключения, ПрефиксыМетаданных);
	ВыполнитьЗаполнение_Сахар(Приемник, Данные, Ресурсы, КолонкиЗаполнения, КолонкиИсключения, ПрефиксыМетаданных);
	ВыполнитьЗаполнение_Сахар(Приемник, Данные, СтандартныеРеквизиты, КолонкиЗаполнения, КолонкиИсключения, ПрефиксыМетаданных);
	ВыполнитьЗаполнение_Сахар(Приемник, Данные, Реквизиты, КолонкиЗаполнения, КолонкиИсключения, ПрефиксыМетаданных);
	
КонецПроцедуры

Процедура ВыполнитьЗаполнение_Сахар(Приемник, Данные, ТаблицаРеквизитов, КолонкиЗаполнения = Неопределено, КолонкиИсключения = Неопределено, ПрефиксыМетаданных = Неопределено)
	
	ПрефиксыМетаданных = ИнициализироватьПрефиксыМетаданных(ПрефиксыМетаданных);
	
	Колонки = Данные.Владелец().Колонки;
	
	// для поддержки поиска по владельцу
	ЗначениеПредыдущейКолонки = Неопределено;
	
	СтруктураКолонокЗаполненияИсключения = СтруктураКолонокЗаполненияИсключения_Сахар(КолонкиЗаполнения, КолонкиИсключения);
	
	Для каждого ПолеДанных Из Колонки Цикл
		
		// если колонка в исключении не заполняем
		Если СтруктураКолонокЗаполненияИсключения.МассивКолонокИсключения.Найти(ВРег(ПолеДанных.Имя)) <> Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		// проверяем колонки заполнения
		Если СтруктураКолонокЗаполненияИсключения.МассивКолонокЗаполнения.Количество() И СтруктураКолонокЗаполненияИсключения.МассивКолонокЗаполнения.Найти(ВРег(ПолеДанных.Имя)) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		МетаданныеРеквизита = МетаданныеРеквизита_Сахар(ТаблицаРеквизитов, ПолеДанных);
		// ... если не находим, то переходим к следующей колонке
		Если МетаданныеРеквизита = Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		МассивТиповРеквизита = МассивТиповРеквизита_Сахар(МетаданныеРеквизита);
		
		ЗначениеДата = ЗначениеКолонкиДата_Сахар(Данные, Колонки, МетаданныеРеквизита.Имя);
		
		// Заполняем найденный реквизит с учетом типа и владельца
		ИмяЗначениеРекизитаВладельца = ВладелецРекизитаДополнительномуПолю_Сахар(Данные, ПолеДанных.Имя);
		
		ТипСоставного = ТипСсылкиПоДополнительномуПолю_Сахар(Данные, МассивТиповРеквизита, МетаданныеРеквизита.Имя);
		ТипРеквизита = ТипРеквизита_Сахар(Приемник[МетаданныеРеквизита.Имя], ТипСоставного);
		
		ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипРеквизита);
		
		СсылкаВладелец = ОбработкаПоляВладелецСправочника_Сахар(Данные, Приемник, МетаданныеРеквизита, ОбъектМетаданных, ИмяЗначениеРекизитаВладельца, ЗначениеПредыдущейКолонки, ПрефиксыМетаданных);
		
		Если МассивТиповРеквизита.Количество() = 1 Тогда
			ЗаполнитьРеквизит_Сахар(Приемник[МетаданныеРеквизита.Имя], Данные[МетаданныеРеквизита.Имя], , СсылкаВладелец , ЗначениеДата);
			
		ИначеЕсли МассивТиповРеквизита.Количество() > 1 Тогда
			Если ТипСоставного <> Неопределено Тогда
				ЗаполнитьРеквизит_Сахар(Приемник[МетаданныеРеквизита.Имя], Данные[МетаданныеРеквизита.Имя], ТипСоставного, СсылкаВладелец, ЗначениеДата);
			КонецЕсли;
		Иначе
			ВызватьИсключение "Тип не определен не удалось заполнить свойство: '" + МетаданныеРеквизита.Имя + "'";
		КонецЕсли;
		
		СохранитьЗначениеПредИдущейКолонки_Сахар(ЗначениеПредыдущейКолонки, Приемник[МетаданныеРеквизита.Имя], ОбъектМетаданных, ПрефиксыМетаданных);
		
	КонецЦикла;
	
КонецПроцедуры

Функция СтруктураКолонокЗаполненияИсключения_Сахар(КолонкиЗаполнения, КолонкиИсключения)
	
	Результат = Новый Структура;
	
	КолонкиЗаполнения = ВРег(?(КолонкиЗаполнения = Неопределено, "", КолонкиЗаполнения));
	КолонкиИсключения = ВРег(?(КолонкиИсключения = Неопределено, "", КолонкиИсключения));
	
	МассивКолонокЗаполнения = СтрРазделить(КолонкиЗаполнения, ",", Ложь);
	МассивКолонокИсключения = СтрРазделить(КолонкиИсключения, ",", Ложь);
	МассивКолонокИсключения.Добавить("ЭТОГРУППА");
	
	Результат.Вставить("МассивКолонокЗаполнения", МассивКолонокЗаполнения);
	Результат.Вставить("МассивКолонокИсключения", МассивКолонокИсключения);
	
	Возврат Результат;
	
КонецФункции

Процедура СохранитьЗначениеПредИдущейКолонки_Сахар(ЗначениеПредыдущейКолонки, Значение, ОбъектМетаданных, ПрефиксыМетаданных)

	Если ОбъектМетаданных <> Неопределено Тогда
		ТипОбъекта = ОбъектМетаданных.ПолноеИмя();
		// обрабатываем ссылки 
		Если СтрНачинаетсяС(ТипОбъекта, ПрефиксыМетаданных.ПрефиксСправочники) ИЛИ СтрНачинаетсяС(ТипОбъекта, ПрефиксыМетаданных.ПрефиксПВХ) Тогда
			ЗначениеПредыдущейКолонки = Значение;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция МетаданныеРеквизита_Сахар(ТаблицаРеквизитов, ПолеДанных)

	// Ищем реквизит по имени колонки в фиче, и если находим, то получаем метаданные
	Если ТипЗнч(ТаблицаРеквизитов) = Тип("ОписанияСтандартныхРеквизитов") Тогда
		МетаданныеРеквизита = Неопределено;
		Для каждого СтандартныйРеквизит Из ТаблицаРеквизитов Цикл
			Если СтандартныйРеквизит.Имя = ПолеДанных.Имя Тогда
				МетаданныеРеквизита = СтандартныйРеквизит;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	Иначе
		МетаданныеРеквизита = ТаблицаРеквизитов.Найти(ПолеДанных.Имя);
	КонецЕсли;
	
	Возврат МетаданныеРеквизита;
	
КонецФункции

Функция МассивТиповРеквизита_сахар(МетаданныеРеквизита)
	
	Если ТипЗнч(МетаданныеРеквизита) = Тип("КолонкаТаблицыЗначений") Тогда
		МассивТиповРеквизита = МетаданныеРеквизита.ТипЗначения.Типы()
	Иначе
		МассивТиповРеквизита = МетаданныеРеквизита.Тип.Типы();
	КонецЕсли;
	
	Возврат МассивТиповРеквизита;
	
КонецФункции

Функция ЗначениеКолонкиДата_Сахар(Данные, Колонки, ИмяРеквизита)
	
	Результат = Неопределено;
	
	// для документов в таблице может быть дополнительное поле ИмяРеквизита_Дата_ попробуем найти его
	Если Колонки.Найти(ИмяРеквизита + "_Дата_") <> Неопределено Тогда
		Результат = Данные[ИмяРеквизита + "_Дата_"];
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ТипРеквизита_Сахар(Приемник, ТипСоставного)
	
	ТипРеквизита = ТипЗнч(Приемник);
	
	Если ТипСоставного <> Неопределено Тогда
		ТипРеквизита = ТипСоставного;
	КонецЕсли;
	
	Возврат ТипРеквизита;
	
КонецФункции

Процедура ЗаполнитьРеквизит_Сахар(Приемник, Данные, ТипСоставного = Неопределено, Владелец = Неопределено, ДатаПоискаДокумента = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Данные) Тогда
		Возврат;
	КонецЕсли;
	
	ПрефиксыМетаданных = ИнициализироватьПрефиксыМетаданных();
	
	ТипРеквизита = ТипРеквизита_Сахар(Приемник, ТипСоставного);
	
	Если Тип("Число") = ТипРеквизита Тогда
		Приемник = ЧислоИзСтроки(Данные);
	ИначеЕсли Тип("Дата") = ТипРеквизита Тогда
		Приемник = ?(ВРег(Данные) <> "ТЕКУЩАЯ ДАТА", ДатаИзСтроки(Данные), ТекущаяДатаСеанса());
	ИначеЕсли Тип("Строка") = ТипРеквизита Тогда
		Приемник = Данные;
	ИначеЕсли Тип("Булево") = ТипРеквизита Тогда
		Приемник = БулевоИзСтроки(Данные);
	ИначеЕсли Тип("ВидДвиженияНакопления") = ТипРеквизита Тогда
		Приемник = ВидДвиженияНакопления[Данные];
	Иначе
		// ссылочные типы
		ОбработатьСсылочныеТипы_Сахар(Приемник, Данные, Владелец, ДатаПоискаДокумента, ТипРеквизита, ПрефиксыМетаданных);
	КонецЕсли;
	
	Если НЕ РеквизитЗаполнен_Сахар(Приемник, ТипРеквизита, Данные) Тогда
		ВызватьИсключение СтрШаблон("Не удалось заполнить реквизит с типом '%1', значением '%2'", ТипРеквизита, Данные);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьСсылочныеТипы_Сахар(Приемник, Данные, Владелец, ДатаПоискаДокумента, ТипРеквизита, ПрефиксыМетаданных)
	
	ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипРеквизита);
	Если ОбъектМетаданных = Неопределено Тогда 
		ВызватьИсключение СтрШаблон("Заполнение по типу: %1 не поддерживается, не удалось обработать реквизит", СокрЛП(ТипРеквизита));
	КонецЕсли;
	
	ТипОбъекта = ОбъектМетаданных.ПолноеИмя();
	// обрабатываем ссылки 
	Если СтрНачинаетсяС(ТипОбъекта, ПрефиксыМетаданных.ПрефиксСправочники) Тогда
		// это справочник
		ОбработатьСсылочныеТипы_Справочники_Сахар(Приемник, Данные, Владелец, ТипОбъекта, ОбъектМетаданных, ПрефиксыМетаданных);
		
	ИначеЕсли СтрНачинаетсяС(ТипОбъекта, ПрефиксыМетаданных.ПрефиксПВХ) Тогда
		// это ПВХ
		ОбработатьСсылочныеТипы_ПВХ_Сахар(Приемник, Данные, ТипОбъекта, ОбъектМетаданных, ПрефиксыМетаданных);
		
	ИначеЕсли СтрНачинаетсяС(ТипОбъекта, ПрефиксыМетаданных.ПрефиксПеречисления) Тогда
		// это перечисление
		ОбработатьСсылочныеТипы_Перечисление_Сахар(Приемник, Данные, ТипОбъекта, ПрефиксыМетаданных);
		
	ИначеЕсли СтрНачинаетсяС(ТипОбъекта, ПрефиксыМетаданных.ПрефиксДокументы) Тогда
		// это документ
		ОбработатьСсылочныеТипы_Документ_Сахар(Приемник, Данные, ТипОбъекта, ПрефиксыМетаданных, ДатаПоискаДокумента);
	Иначе
		ВызватьИсключение СтрШаблон("Заполнение по типу: %1 не поддерживается, не удалось обработать реквизит", СокрЛП(ТипРеквизита));
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьСсылочныеТипы_Справочники_Сахар(Приемник, Данные, Владелец, ТипОбъекта, ОбъектМетаданных, ПрефиксыМетаданных)
	
	СписокВладельцев = ОбъектМетаданных.Владельцы;
	ВидСправочника = Сред(ТипОбъекта, СтрДлина(ПрефиксыМетаданных.ПрефиксСправочники) + 1);
	
	Если ЗначениеЗаполнено(Владелец) Тогда
		Приемник = СсылкаСправочникаСНаименованием(ВидСправочника, Данные, , Владелец);
	Иначе
		Приемник = СсылкаСправочникаСНаименованием(ВидСправочника, Данные);
	КонецЕсли;
	
	// если не нашли по наименованию, ищем по коду
	Если НЕ ЗначениеЗаполнено(Приемник) Тогда
		
		Если ЗначениеЗаполнено(Владелец) Тогда
			Приемник = СсылкаСправочникаСКодом(ВидСправочника, Данные,,Владелец);
		Иначе
			Приемник = СсылкаСправочникаСКодом(ВидСправочника, Данные);
		КонецЕсли;
	КонецЕсли;
	
	// если не нашлось тогда возможно это перд оперделенный 
	МассивПредопределенных = ОбъектМетаданных.ПолучитьИменаПредопределенных();
	ИндексПредОпределенного = МассивПредопределенных.Найти(СокрЛП(Данные));
	Если НЕ ЗначениеЗаполнено(Приемник)
		И ИндексПредОпределенного <> Неопределено Тогда
			Приемник = Справочники[ВидСправочника][Данные];
	КонецЕсли;
		
КонецПроцедуры

Процедура ОбработатьСсылочныеТипы_ПВХ_Сахар(Приемник, Данные, ТипОбъекта, ОбъектМетаданных, ПрефиксыМетаданных)
	
	ВидПВХ = Сред(ТипОбъекта, СтрДлина(ПрефиксыМетаданных.ПрефиксПВХ) + 1);
	Приемник = СсылкаПВХСНаименованием(ВидПВХ, Данные);
	
	// если не нашли по наименованию, ищем по коду
	Если НЕ ЗначениеЗаполнено(Приемник) Тогда
		Приемник = СсылкаПВХСКодом(ВидПВХ, Данные);
	КонецЕсли;
	
	// если не нашлось тогда возможно это перд оперделенный 
	МассивПредопределенных = ОбъектМетаданных.ПолучитьИменаПредопределенных();
	ИндексПредОпределенного = МассивПредопределенных.Найти(СокрЛП(Данные));
	Если НЕ ЗначениеЗаполнено(Приемник)
		И ИндексПредОпределенного <> Неопределено Тогда
		Приемник = ПланыВидовХарактеристик[ВидПВХ][Данные];
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьСсылочныеТипы_Перечисление_Сахар(Приемник, Данные, ТипОбъекта, ПрефиксыМетаданных)
	
	ВидПеречисления = Сред(ТипОбъекта, СтрДлина(ПрефиксыМетаданных.ПрефиксПеречисления) + 1);
	// попытаемся найти по значению
	Попытка
		Приемник = Перечисления[ВидПеречисления][Данные];
	///не получилось попробуем по синониму
	Исключение
		Приемник = ЗначениеПеречисленияПоСинониму(ВидПеречисления, Данные);
	КонецПопытки;
	
КонецПроцедуры

Процедура ОбработатьСсылочныеТипы_Документ_Сахар(Приемник, Данные, ТипОбъекта, ПрефиксыМетаданных, ДатаПоискаДокумента)
	
	ВидДокумента = Сред(ТипОбъекта, СтрДлина(ПрефиксыМетаданных.ПрефиксДокументы) + 1);
	ДатаДокумента = Неопределено;
	// вариант когда дата документа передается в метод в реквизите 'ДатаПоискаДокумента'
	Если ЗначениеЗаполнено(ДатаПоискаДокумента) Тогда
		НомерДокумента = Данные;
		Если ТипЗнч(ДатаПоискаДокумента) = Тип("Строка") Тогда
			ДатаДокумента = ДатаИзСтроки(ДатаПоискаДокумента);
		ИначеЕсли ТипЗнч(ДатаПоискаДокумента) = Тип("Дата") Тогда
			ДатаДокумента = ДатаПоискаДокумента;
		Иначе
			ВызватьИсключение "Не удалось определить дату документа, передано не верное значение параметра 'ДатаПоискаДокумента'";
		КонецЕсли;
	// вариант когда дата документа указана одним параметром с номером документа
	Иначе
		РеквизитыДокументаДляПоиска = СтрРазделить(Данные,"_", Ложь);
		Попытка
			НомерДокумента = Число(РеквизитыДокументаДляПоиска[0]);
		Исключение
			НомерДокумента = РеквизитыДокументаДляПоиска[0];
		КонецПопытки;
		// дату в попытку не будем оборачивать надо давать правильные входные данные
		Если РеквизитыДокументаДляПоиска.Количество() = 2 Тогда
			ДатаДокумента = ДатаИзСтроки(СокрЛП(РеквизитыДокументаДляПоиска[1]));
		КонецЕсли;
	КонецЕсли;
	
	ДатаДокумента = ?(ЗначениеЗаполнено(ДатаДокумента), ДатаДокумента, ТекущаяДатаСеанса());
	
	Приемник = СсылкаНаДокумент(ВидДокумента, НомерДокумента, ДатаДокумента);
	
КонецПроцедуры

Функция ОбработкаПоляВладелецСправочника_Сахар(Данные, Приемник, МетаданныеРеквизита, ОбъектМетаданных, ИмяЗначениеРекизитаВладельца, ЗначениеПредыдущейКолонки, ПрефиксыМетаданных)
	
	СсылкаВладелец = Неопределено;
	
	// для справочников необходимо обработать владельцев
	Если ОбъектМетаданных <> Неопределено Тогда
		// опраделим чем является значение в дополнительном поле ссылкой на реквизит или кодом справочника владельца
		ЭтоИмяРеквизитаВладельца = ЭтоИмяРеквизитаВладельца_Сахар(ИмяЗначениеРекизитаВладельца, Данные.Владелец().Колонки);
		ТипОбъекта = ОбъектМетаданных.ПолноеИмя();
		
		Если СтрНачинаетсяС(ТипОбъекта, ПрефиксыМетаданных.ПрефиксСправочники) Тогда
			СписокВладельцев = ОбъектМетаданных.Владельцы;
			ВидСправочника = Сред(ТипОбъекта, СтрДлина(ПрефиксыМетаданных.ПрефиксСправочники) + 1);
			
			Если НЕ ЭтоИмяРеквизитаВладельца
				И ИмяЗначениеРекизитаВладельца <> Неопределено Тогда
					ТипВладельца = ?(Данные.Владелец().Колонки.Найти(МетаданныеРеквизита.Имя + "_ТипВладельца_") = Неопределено, Неопределено, Данные[МетаданныеРеквизита.Имя + "_ТипВладельца_"]);
					СсылкаВладелец = ВладелецСправочника(ВидСправочника, ИмяЗначениеРекизитаВладельца, ТипВладельца);
			ИначеЕсли ЭтоИмяРеквизитаВладельца 
				И СписокВладельцев.Количество()
				И ИмяЗначениеРекизитаВладельца <> Неопределено Тогда
				СсылкаВладелец = Приемник[ИмяЗначениеРекизитаВладельца];
			ИначеЕсли СписокВладельцев.Количество()
				И ЗначениеПредыдущейКолонки <> Неопределено
				И Метаданные.НайтиПоТипу(ТипЗнч(ЗначениеПредыдущейКолонки))<> Неопределено
				И СписокВладельцев.Содержит(ЗначениеПредыдущейКолонки.Метаданные()) Тогда
				СсылкаВладелец = ЗначениеПредыдущейКолонки;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СсылкаВладелец;
	
КонецФункции

Функция ЭтоИмяРеквизитаВладельца_Сахар(ИмяРекизитаВладельца, Колонки)
	
	Результат = Ложь;
	
	Если ИмяРекизитаВладельца = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если Колонки.Найти(ИмяРекизитаВладельца) <> Неопределено Тогда
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция РеквизитЗаполнен_Сахар(Значение, ТипРеквизита, ЗначениеИсточник)
	
	Результат = Ложь;
	// 01.01.0001 0:00:00
	Если Тип("Число") = ТипРеквизита Тогда
		Результат = РеквизитЗаполненЧисло_Сахар(Значение, ЗначениеИсточник);
		
	ИначеЕсли Тип("Дата") = ТипРеквизита Тогда
		Результат = РеквизитЗаполненДата_Сахар(Значение, ЗначениеИсточник);
		
	ИначеЕсли Тип("Строка") = ТипРеквизита Тогда
		Результат = РеквизитЗаполненСтрока_Сахар(Значение, ЗначениеИсточник);
		
	ИначеЕсли Тип("Булево") = ТипРеквизита ИЛИ Тип("ВидДвиженияНакопления") = ТипРеквизита Тогда
		Результат = ЗначениеЗаполнено(Значение);
		
	Иначе
		// это ссылочный тип
		Результат = РеквизитЗаполненСсылка_Сахар(Значение, ЗначениеИсточник);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция РеквизитЗаполненЧисло_Сахар(Значение, ЗначениеИсточник)
	
	Если Значение = 0 И ЗначениеИсточник = "0" Тогда
		Результат = Истина;
	Иначе
		Результат = ЗначениеЗаполнено(Значение);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция РеквизитЗаполненДата_Сахар(Значение, ЗначениеИсточник)
	
	Если СтрНачинаетсяС(ЗначениеИсточник, "01.01.0001") И НЕ ЗначениеЗаполнено(Значение) Тогда
		Результат = Истина;
	Иначе
		Результат = ЗначениеЗаполнено(Значение);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция РеквизитЗаполненСтрока_Сахар(Значение, ЗначениеИсточник)
	
	Если ЗначениеИсточник = "" И Значение = "" Тогда
		Результат = Истина;
	Иначе
		Результат = ЗначениеЗаполнено(Значение);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция РеквизитЗаполненСсылка_Сахар(Значение, ЗначениеИсточник)
	
	Если Не ЗначениеЗаполнено(ЗначениеИсточник) Тогда
		Результат = Истина;
	Иначе
		Результат = ЗначениеЗаполнено(Значение);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ТипСсылкиПоДополнительномуПолю_Сахар(Данные, МассивТиповРеквизита, ИмяКолонки)
	
	Результат = Неопределено;
	ИмяТипа = "";
	Колонки = Данные.Владелец().Колонки;
	Если Колонки.Найти(ИмяКолонки + "_Тип_") <> Неопределено Тогда
		ИмяТипа = Данные[ИмяКолонки + "_Тип_"];
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИмяТипа) Тогда
		
		Для Каждого СтрокаТипа Из МассивТиповРеквизита Цикл
			
			НайденТип = Метаданные.НайтиПоТипу(СтрокаТипа);
			НайденТипИмя = ?(НайденТип = Неопределено, "", НайденТип.Имя);
			НайденТипИмя = СокрЛП(ВРег(СтрЗаменить(НайденТипИмя," ","")));
			
			Если ЭтоТотТип_Сахар(СтрокаТипа, ИмяТипа, НайденТипИмя) Тогда
				Результат = СтрокаТипа;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЭтоТотТип_Сахар(СтрокаТипа, ИмяТипа, НайденТипИмя)
	
	Возврат (СтрокаТипа = Тип("Булево") И ВРег(ИмяТипа) = "БУЛЕВО")
		ИЛИ (СтрокаТипа = Тип("Число") И ВРег(ИмяТипа) = "ЧИСЛО")
		ИЛИ (СтрокаТипа = Тип("Дата") И ВРег(ИмяТипа) = "ДАТА")
		ИЛИ (СтрокаТипа = Тип("Строка") И ВРег(ИмяТипа) = "СТРОКА")
		ИЛИ (ВРег(ИмяТипа) = НайденТипИмя);
	
КонецФункции 

Функция ВладелецРекизитаДополнительномуПолю_Сахар(Данные, ИмяКолонки)
	
	Результат = Неопределено;
	
	Колонки = Данные.Владелец().Колонки;
	Если Колонки.Найти(ИмяКолонки + "_Владелец_") <> Неопределено Тогда
		Результат = Данные[ИмяКолонки + "_Владелец_"];
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Владелец Код, Наименование
Функция ВладелецСправочника(ИмяСправочника, ВладелецСтрокой, ТипВладельца = Неопределено) Экспорт
	
	Результат = Неопределено;
	
	Если НЕ ЗначениеЗаполнено(ВладелецСтрокой) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ПрефиксыМетаданных = ИнициализироватьПрефиксыМетаданных();
	
	Владельцы = Метаданные.Справочники[ИмяСправочника].Владельцы;
	
	Для Каждого Стр Из Владельцы Цикл
		
		ПолноеИмя = Стр.ПолноеИмя();
		
		Если СтрНачинаетсяС(ПолноеИмя, ПрефиксыМетаданных.ПрефиксСправочники) Тогда
			Имя = СтрЗаменить(ПолноеИмя, ПрефиксыМетаданных.ПрефиксСправочники, "");
			Результат = ВладелецСправочника_СправочникНайти(Имя, ВладелецСтрокой, ТипВладельца);
			
		ИначеЕсли СтрНачинаетсяС(ПолноеИмя, ПрефиксыМетаданных.ПрефиксПВХ) Тогда
			Имя = СтрЗаменить(ПолноеИмя, ПрефиксыМетаданных.ПрефиксПВХ, "");
			Результат = ВладелецСправочника_ПВХНайти(Имя, ВладелецСтрокой, ТипВладельца);
			
		Иначе
			ВызватьИсключение СтрШаблон("Поиск владельца для %1 не реализовано", ПолноеИмя);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Результат) Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		ВызватьИсключение СтрШаблон("Владелец %1 Справочника %2 не найден", ВладелецСтрокой, ИмяСправочника);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ВладелецСправочника_СправочникНайти(Имя, ВладелецСтрокой, ТипВладельца)
	
	Результат = Неопределено;
	
	Если НеТотТипВладельца(Имя, ТипВладельца) Тогда
		Возврат Результат;
	КонецЕсли;
	Результат = СсылкаСправочникаСНаименованием(Имя, ВладелецСтрокой);
	
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Результат = СсылкаСправочникаСКодом(Имя, ВладелецСтрокой);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ВладелецСправочника_ПВХНайти(Имя, ВладелецСтрокой, ТипВладельца)
	
	Результат = Неопределено;
	
	НеТотТипВладельца = НеТотТипВладельца(Имя, ТипВладельца);
	Если НеТотТипВладельца(Имя, ТипВладельца) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Результат = СсылкаПВХСНаименованием(Имя, ВладелецСтрокой);
	
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Результат = СсылкаПВХСКодом(Имя, ВладелецСтрокой);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция НеТотТипВладельца(Имя, ТипВладельца)
	Возврат ЗначениеЗаполнено(ТипВладельца) И Не (Имя = ТипВладельца);
КонецФункции

#КонецОбласти

Функция СсылкаПВХСКодом(ВидСправочника, Код, Родитель = Неопределено) Экспорт
	Возврат ПланыВидовХарактеристик[ВидСправочника].НайтиПоКоду(Код, Родитель);
КонецФункции

Функция СсылкаПВХСНаименованием(ВидСправочника, Наименование, Родитель = Неопределено) Экспорт
	Возврат ПланыВидовХарактеристик[ВидСправочника].НайтиПоНаименованию(Наименование, , Родитель);
КонецФункции

Функция ЭлементСправочникаСКодом(ВидСправочника, Код, Родитель = Неопределено, Владелец = Неопределено) Экспорт
	
	Перем Результат;
	
	Результат = СсылкаСправочникаСКодом(ВидСправочника, Код, Родитель, Владелец);
	Если Результат.Пустая() Тогда
		Результат = Справочники[ВидСправочника].СоздатьЭлемент();
		Результат.Код = Код;
		Если ЗначениеЗаполнено(Владелец) Тогда
			Результат.Владелец = Владелец;
		КонецЕсли;
		Если ЗначениеЗаполнено(Родитель) Тогда
			Результат.Родитель = Родитель;
		КонецЕсли;
	Иначе
		Результат = Результат.ПолучитьОбъект();
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Функция ЭлементСправочникаСНаименованием(ВидСправочника, Наименование, Родитель = Неопределено, Владелец = Неопределено) Экспорт
	
	Перем Результат;
	
	Результат = СсылкаСправочникаСНаименованием(ВидСправочника, Наименование, Родитель, Владелец);
	Если Результат.Пустая() Тогда
		Результат = Справочники[ВидСправочника].СоздатьЭлемент();
		Результат.Наименование = Наименование;
		Если ЗначениеЗаполнено(Владелец) Тогда
			Результат.Владелец = Владелец;
		КонецЕсли;
		Если ЗначениеЗаполнено(Родитель) Тогда
			Результат.Родитель = Родитель;
		КонецЕсли;
	Иначе
		Результат = Результат.ПолучитьОбъект();
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Функция СсылкаСправочникаСКодом(ВидСправочника, Код, Родитель = Неопределено, Владелец = Неопределено, ПоискПоПолномуКоду = Ложь) Экспорт
	Возврат Справочники[ВидСправочника].НайтиПоКоду(Код, ПоискПоПолномуКоду, Родитель, Владелец);
КонецФункции

Функция СсылкаСправочникаСНаименованием(ВидСправочника, Наименование, Родитель = Неопределено, Владелец = Неопределено) Экспорт
	Возврат Справочники[ВидСправочника].НайтиПоНаименованию(Наименование, , Родитель, Владелец);
КонецФункции

Функция НовыйДокумент(Тип, Номер, Дата, СоздаватьНовый = Истина) Экспорт
	
	Ссылка = СсылкаНаДокумент(Тип, Номер, Дата);
	
	Если ЗначениеЗаполнено(Ссылка) Тогда
		Результат = Ссылка.ПолучитьОбъект();
	Иначе 
		Результат = Документы[Тип].СоздатьДокумент();
		Результат.Дата = Дата;
		Результат.Номер = Номер;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СсылкаНаДокумент(ТипДокумента, НомерДокумента, ДатаДокумента) Экспорт
	Возврат Документы[ТипДокумента].НайтиПоНомеру(НомерДокумента, ДатаДокумента);
КонецФункции

Функция ОбменДаннымиЗагрузка(КонтекстВанессы) Экспорт
	
	Перем ЗначениеИзКонтекста;
	
	Возврат ?(КонтекстВанессы.Свойство("ОбменДаннымиЗагрузка", ЗначениеИзКонтекста), БулевоИзСтроки(ЗначениеИзКонтекста), Истина);
КонецФункции

Функция ЗначениеПеречисленияПоСинониму(ИмяПеречисления, Синоним) Экспорт
	
	Перем Значения, Значение;
	
	Если Не ЗначениеЗаполнено(Синоним) Тогда
		Возврат Перечисления[ИмяПеречисления].ПустаяСсылка();
	КонецЕсли;
	
	Значения = Новый Соответствие;
	Для Каждого Значение Из Метаданные.Перечисления[ИмяПеречисления].ЗначенияПеречисления Цикл
		Значения.Вставить(Значение.Синоним, Значение.Имя);
	КонецЦикла;
	
	Возврат Перечисления[ИмяПеречисления][Значения[Синоним]];
КонецФункции

Функция ТаблицаЗначенийИзПараметра(ТаблицаПараметр) Экспорт
	
	Перем ТЗ;
	
	ТЗ = МассивСтруктурВТаблицуЗначений(ТаблицаПараметр);
	
	Для Каждого Колонка Из ТаблицаПараметр[0] Цикл
		ТЗ.Колонки.Найти(Колонка.Ключ).Имя = Колонка.Значение;
	КонецЦикла;
	
	ТЗ.Удалить(0);
	
	Возврат ТЗ;
КонецФункции

Функция МассивСтруктурВТаблицуЗначений(Массив)
	
	Перем Результат;
	
	Результат = Новый ТаблицаЗначений;
	
	Если Массив.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	Для Каждого ПолеСтруктуры Из Массив[0] Цикл
		Результат.Колонки.Добавить(ПолеСтруктуры.Ключ);
	КонецЦикла;
	
	Для Каждого ЭлементМассива Из Массив Цикл
		ЗаполнитьЗначенияСвойств(Результат.Добавить(), ЭлементМассива);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Функция ЧислоИзСтроки(Стр) Экспорт
	
	Перем ОТ;
	
	ОТ = Новый ОписаниеТипов("Число");
	
	Возврат ОТ.ПривестиЗначение(Стр);
КонецФункции

Функция ДатаИзСтроки(Знач Стр) Экспорт
	
	Перем ОТ;
	
	ОТ = Новый ОписаниеТипов("Дата");
	
	Если СокрЛП(Стр) = "" Тогда 
		Возврат Дата(1, 1, 1);
	Иначе 	
		Возврат ОТ.ПривестиЗначение(?(СтрДлина(Стр) < 16, Стр + " 00:00:00", Стр));
	КонецЕсли;
	
КонецФункции

Функция БулевоИзСтроки(Стр) Экспорт
	
	Перем ОТ;
	
	Если НРег(Стр) = "да" или НРег(Стр) = "истина" или Стр = "1" или НРег(Стр) = "yes" или НРег(Стр) = "true" или Стр = 1 Тогда 
		Возврат Истина;
	КонецЕсли;	
	
	ОТ = Новый ОписаниеТипов("Булево");
	
	Возврат ОТ.ПривестиЗначение(Стр);
	
КонецФункции
